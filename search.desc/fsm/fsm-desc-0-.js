searchState.loadedDescShard("fsm", 0, "Distributed FSM Examples\nLathe FSM implementation using hand-coded approach\nMill FSM implementation using the <code>fsm!</code> macro\nMain FSM struct using type-state pattern\nCommands that are sent to the lathe FSM\nType alias for LatheController using the generic …\nBusiness data for the lathe FSM\nResponses returned by the lathe FSM\nRuntime wrapper enum for handling dynamic state switching\nLathe states - zero-sized types for compile-time state …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDelegates command handling to the appropriate …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lathe FSM in the Off state\nEmergency stop transition available from any state\nDebug helper to print current state and data\nType alias for the FSM controller.\nWrapper enum for the FSM states.\nCommands that can be sent to the mill FSM\nBusiness data for the mill FSM\nResponses returned by the mill FSM\nMill states - these are zero-sized types used for …\nCreates a new FSM controller with the given data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given data into an FSM wrapper.\nReturns the argument unchanged.\nHandles a command and returns the new state and response.\nHandles a command and returns the new state and response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new FSM wrapper with the given data.\nRepresents a Finite State Machine with a specific state …\nController for managing an FSM in a separate thread.\nTrait for handling commands in the FSM.\nChecks for any responses from the FSM.\nCreates a new FSM controller with the given data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles a command and returns the new state and response.\nHandles a command and returns the new state and response.\nHandles a command and returns the new state and response.\nHandles a command and returns the new state and response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new FSM with the given data.\nCreates a new FSM controller with the given data.\nPrints the current state and data of the FSM.\nSends a command to the FSM.\nShuts down the FSM controller.\nHandles a command and transitions to a new state.\nHandles a command and transitions to a new state.\nHandles a command and transitions to a new state.\nHandles a command and transitions to a new state.")